import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional
import os
import random

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

from config import BOT_TOKEN, DAILY_COOLDOWN, xp_for_level, UPGRADE_RULES, TRIPLE_CARD_BONUS
from database import Database
from cards import get_random_card, get_card_info, format_card_message, get_card_xp, CARDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.effective_user:
        return
    
    await db.create_user(
        update.effective_user.id,
        update.effective_user.username or "Anonymous"
    )
    
    welcome_text = """
üéÆ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/dailycard - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
/mycards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/cardinfo <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ

–£–¥–∞—á–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏! üéâ
"""
    await update.message.reply_text(welcome_text)

async def calculate_level(xp: int) -> tuple[int, int, int]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç –∏ –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    level = 1
    while xp >= xp_for_level(level):
        xp -= xp_for_level(level)
        level += 1
    return level, xp, xp_for_level(level) - xp

async def format_time_until(target_time: Optional[datetime]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    if not target_time:
        return "—Å–µ–π—á–∞—Å"
    
    now = datetime.now()
    if target_time <= now:
        return "—Å–µ–π—á–∞—Å"
    
    diff = target_time - now
    total_seconds = diff.total_seconds()
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    total_minutes = int(total_seconds / 60)
    hours = total_minutes // 60
    minutes = total_minutes % 60
    
    return f"{hours}—á {minutes}–º"

async def send_card_message(message: str, image_path: str, update: Update):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        if not os.path.exists(image_path):
            await update.effective_message.reply_text(
                message,
                parse_mode=ParseMode.HTML
            )
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(image_path)[1].lower()
        
        with open(image_path, 'rb') as media_file:
            if file_ext in ['.mp4', '.gif']:
                # –î–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º animation
                await update.effective_message.reply_animation(
                    animation=media_file,
                    caption=message,
                    parse_mode=ParseMode.HTML,
                    read_timeout=30,
                    write_timeout=30
                )
            else:
                # –î–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º photo
                await update.effective_message.reply_photo(
                    photo=media_file,
                    caption=message,
                    parse_mode=ParseMode.HTML,
                    read_timeout=30,
                    write_timeout=30
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await update.effective_message.reply_text(
            message,
            parse_mode=ParseMode.HTML
        )

async def dailycard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dailycard"""
    if not update.effective_user or not update.effective_message:
        return

    user = await db.get_user(update.effective_user.id)
    if not user:
        await db.create_user(
            update.effective_user.id,
            update.effective_user.username or "Anonymous"
        )
        user = await db.get_user(update.effective_user.id)

    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if user and user['last_daily']:
        try:
            last_daily = datetime.fromisoformat(user['last_daily'].replace('Z', '+00:00'))
            next_daily = last_daily + timedelta(seconds=DAILY_COOLDOWN)
            
            if now < next_daily:
                time_until = await format_time_until(next_daily)
                await update.effective_message.reply_text(
                    f"‚åõ –°–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {time_until}"
                )
                return
        except ValueError:
            pass

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    card_name, card_info = get_random_card()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞—Ä—Ç–∏—Ñ–∞–∫—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    if card_info['rarity'] == 'artifact':
        # 50/50 —à–∞–Ω—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ –ø–æ—Ç–µ—Ä—é —Å–ª—É—á–∞–π–Ω–æ–π
        if random.random() < 0.5:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ª—é–±–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            bonus_card_name, bonus_card_info = get_random_card()
            await db.add_card(update.effective_user.id, bonus_card_name)
            await update.effective_message.reply_text(
                f"üéÅ –ê—Ä—Ç–∏—Ñ–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –≤–∞–º –±–æ–Ω—É—Å!\n"
                f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: {bonus_card_name} ({bonus_card_info['rarity']})"
            )
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_cards = await db.get_user_cards(update.effective_user.id)
            if user_cards:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                card_to_remove = random.choice(user_cards)
                await db.remove_card(update.effective_user.id, card_to_remove['card_name'])
                await update.effective_message.reply_text(
                    f"üíÄ –ê—Ä—Ç–∏—Ñ–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–±—Ä–∞–ª–∞ —É –≤–∞—Å –∫–∞—Ä—Ç–æ—á–∫—É: {card_to_remove['card_name']}"
                )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    count = await db.add_card(update.effective_user.id, card_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—Ä–æ–π–∫—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    if count % 3 == 0:
        bonus_xp = TRIPLE_CARD_BONUS[card_info['rarity']]
        await db.add_xp(update.effective_user.id, bonus_xp)
        await update.effective_message.reply_text(
            f"üéâ –ë–æ–Ω—É—Å! –£ –≤–∞—Å {count} –∫–∞—Ä—Ç–æ—á–µ–∫ {card_name}!\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {bonus_xp} –æ–ø—ã—Ç–∞!"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
    await db.update_last_daily(update.effective_user.id)
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
    xp = get_card_xp(card_info["rarity"])
    await db.add_xp(update.effective_user.id, xp)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
    user_cards = await db.get_user_cards(update.effective_user.id)
    total_cards = sum(card['count'] for card in user_cards)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    next_daily = now + timedelta(seconds=DAILY_COOLDOWN)
    time_until = await format_time_until(next_daily)
    
    message = format_card_message(
        update.effective_user.username or "Anonymous",
        card_name,
        card_info,
        total_cards,
        time_until
    )
    
    await send_card_message(message, card_info['image_path'], update)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    if not update.effective_user or not update.effective_message:
        return

    user = await db.get_user(update.effective_user.id)
    if not user:
        await update.effective_message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        return

    xp = user['xp']
    level, current_xp, xp_needed = await calculate_level(xp)
    
    user_cards = await db.get_user_cards(update.effective_user.id)
    total_cards = sum(card['count'] for card in user_cards)
    
    unique_cards = len(user_cards)
    
    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å @{update.effective_user.username or "Anonymous"}

üìä –£—Ä–æ–≤–µ–Ω—å: {level}
‚≠êÔ∏è –û–ø—ã—Ç: {current_xp}/{xp_needed}
üé¥ –ö–∞—Ä—Ç–æ—á–µ–∫: {total_cards} (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_cards})
"""
    
    await update.effective_message.reply_text(profile_text)

async def mycards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mycards"""
    if not update.effective_user or not update.effective_message:
        return

    user_cards = await db.get_user_cards(update.effective_user.id)
    if not user_cards:
        await update.effective_message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dailycard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é!")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    cards_by_rarity = {
        "artifact": [],
        "legendary": [],
        "epic": [],
        "rare": [],
        "common": []
    }
    
    for card in user_cards:
        card_info = get_card_info(card['card_name'])
        if card_info:
            cards_by_rarity[card_info['rarity']].append(
                f"{card['card_name']} (x{card['count']})"
            )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    rarity_emoji = {
        "artifact": "üî¥",
        "legendary": "üü°",
        "epic": "üü£",
        "rare": "üîµ",
        "common": "‚ö™"
    }
    
    message = "üé¥ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n"
    for rarity, cards in cards_by_rarity.items():
        if cards:
            message += f"{rarity_emoji[rarity]} {rarity.capitalize()}:\n"
            message += "\n".join(f"‚Ä¢ {card}" for card in cards)
            message += "\n\n"

    await update.effective_message.reply_text(message)

async def cardinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cardinfo"""
    if not update.effective_message or not context.args:
        await update.effective_message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏: /cardinfo <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
        )
        return

    card_name = " ".join(context.args)
    card_info = get_card_info(card_name)
    
    if not card_info:
        await update.effective_message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    rarity_emoji = {
        "common": "‚ö™",
        "rare": "üîµ",
        "epic": "üü£",
        "legendary": "üü°"
    }

    message = f"""
{rarity_emoji[card_info['rarity']]} [{card_name}]
üîπ –†–µ–¥–∫–æ—Å—Ç—å: {card_info['rarity'].capitalize()}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {card_info['description']}
üß† –û–ø—ã—Ç: +{get_card_xp(card_info['rarity'])} XP
"""

    await send_card_message(message, card_info['image_path'], update)

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
    if not update.effective_message:
        return
    
    leaders = await db.get_leaderboard()
    if not leaders:
        await update.effective_message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
        return
    
    message = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, leader in enumerate(leaders, 1):
        message += f"{i}. @{leader['username']}\n"
        message += f"   ‚≠êÔ∏è {leader['xp']} –æ–ø—ã—Ç–∞\n"
        message += f"   üé¥ {leader['total_cards']} –∫–∞—Ä—Ç–æ—á–µ–∫ ({leader['unique_cards']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)\n\n"
    
    await update.effective_message.reply_text(message)

async def upgrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upgrade"""
    if not update.effective_message or not context.args:
        await update.effective_message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏: /upgrade <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
        )
        return
    
    card_name = " ".join(context.args)
    card_info = get_card_info(card_name)
    
    if not card_info:
        await update.effective_message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if card_info['rarity'] == "artifact":
        await update.effective_message.reply_text("‚ùå –ê—Ä—Ç–∏—Ñ–∞–∫—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å")
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
    result = await db.upgrade_cards(update.effective_user.id, card_name)
    if not result:
        await update.effective_message.reply_text(
            f"‚ùå –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ 3 –∫–∞—Ä—Ç–æ—á–∫–∏ {card_name}"
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ä–µ–¥–∫–æ—Å—Ç—å
    next_rarity = UPGRADE_RULES[card_info['rarity']]
    
    # –ò—â–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    available_cards = [
        name for name, info in CARDS.items()
        if info['rarity'] == next_rarity
    ]
    
    if not available_cards:
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–æ–≤–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    new_card_name = random.choice(available_cards)
    new_card_info = get_card_info(new_card_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    await db.add_card(update.effective_user.id, new_card_name)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    rarity_emoji = {
        "artifact": "üî¥",
        "legendary": "üü°",
        "epic": "üü£",
        "rare": "üîµ",
        "common": "‚ö™"
    }
    
    message = f"""‚ú® –£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!

–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 3x {card_name} ({card_info['rarity']})
–ü–æ–ª—É—á–µ–Ω–æ: {rarity_emoji[next_rarity]} [{new_card_name}]
üîπ –†–µ–¥–∫–æ—Å—Ç—å: {next_rarity.capitalize()}
üìù {new_card_info['description']}"""

    await send_card_message(message, new_card_info['image_path'], update)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("dailycard", dailycard))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("mycards", mycards))
    app.add_handler(CommandHandler("cardinfo", cardinfo))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("upgrade", upgrade))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    loop = asyncio.get_event_loop()
    loop.run_until_complete(db.init())
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling() 